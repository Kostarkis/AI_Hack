{"messages": [{"role": "system","content": "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"}, {"role": "user", "content": "Based on provided above code fragmentation process example, please fragment the following code with the same approach:\n\nfrom .models import AcademicSession, AcademicTerm\n\n\nclass SiteWideConfigs:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        current_session = AcademicSession.objects.get(current=True)\n        current_term = AcademicTerm.objects.get(current=True)\n\n        request.current_session = current_session\n        request.current_term = current_term\n\n        response = self.get_response(request)\n\n        return response\n\n###\nDo not include any additional comments and explanations\nI repeat, please fragment above code with the same approach\n"}, {"role": "assistant", "content": "##FRAGMENT_0\n\nclass SiteWideConfigs:\n    def __init__(self, get_response):\n        self.get_response = get_response\n\n    def __call__(self, request):\n        current_session = AcademicSession.objects.get(current=True)\n        current_term = AcademicTerm.objects.get(current=True)\n\n        request.current_session = current_session\n        request.current_term = current_term\n\n        response = self.get_response(request)\n\n        return response\n\nDEPENDENCIES:\nAcademicSession.objects, AcademicTerm.objects"}]}
{"messages": [{"role": "system", "content": "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"}, {"role": "user", "content": "from django.db import models\n\n# Create your models here.\n\n\nclass SiteConfig(models.Model):\n    \"\"\"Site Configurations\"\"\"\n\n    key = models.SlugField()\n    value = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.key\n\n\nclass AcademicSession(models.Model):\n    \"\"\"Academic Session\"\"\"\n\n    name = models.CharField(max_length=200, unique=True)\n    current = models.BooleanField(default=True)\n\n    class Meta:\n        ordering = [\"-name\"]\n\n    def __str__(self):\n        return self.name\n\n\nclass AcademicTerm(models.Model):\n    \"\"\"Academic Term\"\"\"\n\n    name = models.CharField(max_length=20, unique=True)\n    current = models.BooleanField(default=True)\n\n    class Meta:\n        ordering = [\"name\"]\n\n    def __str__(self):\n        return self.name\n\n\nclass Subject(models.Model):\n    \"\"\"Subject\"\"\"\n\n    name = models.CharField(max_length=200, unique=True)\n\n    class Meta:\n        ordering = [\"name\"]\n\n    def __str__(self):\n        return self.name\n\n\nclass StudentClass(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n\n    class Meta:\n        verbose_name = \"Class\"\n        verbose_name_plural = \"Classes\"\n        ordering = [\"name\"]\n\n    def __str__(self):\n        return self.name\n"}, {"role": "assistant", "content": "##FRAGMENT_0\n\nclass SiteConfig(models.Model):\n    \"\"\"Site Configurations\"\"\"\n\n    key = models.SlugField()\n    value = models.CharField(max_length=200)\n\n    def __str__(self):\n        return self.key\n\nDEPENDENCIES:\nmodels.Model, models.SlugField, models.CharField\n\n##FRAGMENT_1\n\nclass AcademicSession(models.Model):\n    \"\"\"Academic Session\"\"\"\n\n    name = models.CharField(max_length=200, unique=True)\n    current = models.BooleanField(default=True)\n\n    class Meta:\n        ordering = [\"-name\"]\n\n    def __str__(self):\n        return self.name\n\nDEPENDENCIES:\nAcademicSession.Meta\n\n##FRAGMENT_2\n\nclass AcademicTerm(models.Model):\n    \"\"\"Academic Term\"\"\"\n\n    name = models.CharField(max_length=20, unique=True)\n    current = models.BooleanField(default=True)\n\n    class Meta:\n        ordering = [\"name\"]\n\n    def __str__(self):\n        return self.name\n\nDEPENDENCIES:\nAcademicTerm.Meta\n\n##FRAGMENT_3\n\nclass Subject(models.Model):\n    \"\"\"Subject\"\"\"\n\n    name = models.CharField(max_length=200, unique=True)\n\n    class Meta:\n        ordering = [\"name\"]\n\n    def __str__(self):\n        return self.name\n\nDEPENDENCIES:\nSubject.Meta\n\n##FRAGMENT_4\n\nclass StudentClass(models.Model):\n    name = models.CharField(max_length=200, unique=True)\n\n    class Meta:\n        verbose_name = \"Class\"\n        verbose_name_plural = \"Classes\"\n        ordering = [\"name\"]\n\n    def __str__(self):\n        return self.name\n\nDEPENDENCIES:\nStudentClass.Meta\n\n##FRAGMENT_5\n\nclass AcademicSession.Meta:\n    ordering = [\"-name\"]\n\nDEPENDENCIES:\nmodels.Model.Meta\n\n##FRAGMENT_6\n\nclass AcademicTerm.Meta:\n    ordering = [\"name\"]\n\nDEPENDENCIES:\nmodels.Model.Meta\n\n##FRAGMENT_7\n\nclass Subject.Meta:\n    ordering = [\"name\"]\n\nDEPENDENCIES:\nmodels.Model.Meta\n\n##FRAGMENT_8\n\nclass StudentClass.Meta:\n    verbose_name = \"Class\"\n    verbose_name_plural = \"Classes\"\n    ordering = [\"name\"]\n\nDEPENDENCIES:\nmodels.Model.Meta"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django.core.validators import RegexValidator\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.utils import timezone\n\n\nclass Staff(models.Model):\n    STATUS = [(\"active\", \"Active\"), (\"inactive\", \"Inactive\")]\n\n    GENDER = [(\"male\", \"Male\"), (\"female\", \"Female\")]\n\n    current_status = models.CharField(max_length=10, choices=STATUS, default=\"active\")\n    surname = models.CharField(max_length=200)\n    firstname = models.CharField(max_length=200)\n    other_name = models.CharField(max_length=200, blank=True)\n    gender = models.CharField(max_length=10, choices=GENDER, default=\"male\")\n    date_of_birth = models.DateField(default=timezone.now)\n    date_of_admission = models.DateField(default=timezone.now)\n\n    mobile_num_regex = RegexValidator(\n        regex=\"^[0-9]{10,15}$\", message=\"Entered mobile number isn't in a right format!\"\n    )\n    mobile_number = models.CharField(\n        validators=[mobile_num_regex], max_length=13, blank=True\n    )\n\n    address = models.TextField(blank=True)\n    others = models.TextField(blank=True)\n\n    def __str__(self):\n        return f\"{self.surname} {self.firstname} {self.other_name}\"\n\n    def get_absolute_url(self):\n        return reverse(\"staff-detail\", kwargs={\"pk\": self.pk})\n"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass Staff(models.Model):\n    STATUS = [(\"active\", \"Active\"), (\"inactive\", \"Inactive\")]\n\n    GENDER = [(\"male\", \"Male\"), (\"female\", \"Female\")]\n\n    current_status = models.CharField(max_length=10, choices=STATUS, default=\"active\")\n    surname = models.CharField(max_length=200)\n    firstname = models.CharField(max_length=200)\n    other_name = models.CharField(max_length=200, blank=True)\n    gender = models.CharField(max_length=10, choices=GENDER, default=\"male\")\n    date_of_birth = models.DateField(default=timezone.now)\n    date_of_admission = models.DateField(default=timezone.now)\n\n    mobile_num_regex = RegexValidator(\n        regex=\"^[0-9]{10,15}$\", message=\"Entered mobile number isn't in a right format!\"\n    )\n    mobile_number = models.CharField(\n        validators=[mobile_num_regex], max_length=13, blank=True\n    )\n\n    address = models.TextField(blank=True)\n    others = models.TextField(blank=True)\n\n    def __str__(self):\n        return f\"{self.surname} {self.firstname} {self.other_name}\"\n\n    def get_absolute_url(self):\n        return reverse(\"staff-detail\", kwargs={\"pk\": self.pk})\n\nDEPENDENCIES:\nmodels.Model, models.CharField, models.DateField, timezone.now, RegexValidator, models.TextField, reverse"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django.contrib.messages.views import SuccessMessageMixin\nfrom django.forms import widgets\nfrom django.shortcuts import render\nfrom django.urls import reverse_lazy\nfrom django.views.generic import DetailView, ListView\nfrom django.views.generic.edit import CreateView, DeleteView, UpdateView\n\nfrom .models import Staff\n\n\nclass StaffListView(ListView):\n    model = Staff\n\n\nclass StaffDetailView(DetailView):\n    model = Staff\n    template_name = \"staffs/staff_detail.html\"\n\n\nclass StaffCreateView(SuccessMessageMixin, CreateView):\n    model = Staff\n    fields = \"__all__\"\n    success_message = \"New staff successfully added\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StaffCreateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"date_of_admission\"].widget = widgets.DateInput(\n            attrs={\"type\": \"date\"}\n        )\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        return form\n\n\nclass StaffUpdateView(SuccessMessageMixin, UpdateView):\n    model = Staff\n    fields = \"__all__\"\n    success_message = \"Record successfully updated.\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StaffUpdateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"date_of_admission\"].widget = widgets.DateInput(\n            attrs={\"type\": \"date\"}\n        )\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        return form\n\n\nclass StaffDeleteView(DeleteView):\n    model = Staff\n    success_url = reverse_lazy(\"staff-list\")\n"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass StaffListView(ListView):\n    model = Staff\n\nDEPENDENCIES:\nListView, Staff\n\n##FRAGMENT_1\n\nclass StaffDetailView(DetailView):\n    model = Staff\n    template_name = \"staffs/staff_detail.html\"\n\nDEPENDENCIES:\nDetailView, Staff\n\n##FRAGMENT_2\n\nclass StaffCreateView(SuccessMessageMixin, CreateView):\n    model = Staff\n    fields = \"__all__\"\n    success_message = \"New staff successfully added\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StaffCreateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"date_of_admission\"].widget = widgets.DateInput(\n            attrs={\"type\": \"date\"}\n        )\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        return form\n\nDEPENDENCIES:\nSuccessMessageMixin, CreateView, Staff, widgets.DateInput, widgets.Textarea\n\n##FRAGMENT_3\n\nclass StaffUpdateView(SuccessMessageMixin, UpdateView):\n    model = Staff\n    fields = \"__all__\"\n    success_message = \"Record successfully updated.\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StaffUpdateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"date_of_admission\"].widget = widgets.DateInput(\n            attrs={\"type\": \"date\"}\n        )\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 1})\n        return form\n\nDEPENDENCIES:\nSuccessMessageMixin, UpdateView, Staff, widgets.DateInput, widgets.Textarea\n\n##FRAGMENT_4\n\nclass StaffDeleteView(DeleteView):\n    model = Staff\n    success_url = reverse_lazy(\"staff-list\")\n\nDEPENDENCIES:\nDeleteView, Staff, reverse_lazy"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django.core.validators import RegexValidator\nfrom django.db import models\nfrom django.urls import reverse\nfrom django.utils import timezone\n\nfrom apps.corecode.models import StudentClass\n\n\nclass Student(models.Model):\n    STATUS_CHOICES = [(\"active\", \"Active\"), (\"inactive\", \"Inactive\")]\n\n    GENDER_CHOICES = [(\"male\", \"Male\"), (\"female\", \"Female\")]\n\n    current_status = models.CharField(\n        max_length=10, choices=STATUS_CHOICES, default=\"active\"\n    )\n    registration_number = models.CharField(max_length=200, unique=True)\n    surname = models.CharField(max_length=200)\n    firstname = models.CharField(max_length=200)\n    other_name = models.CharField(max_length=200, blank=True)\n    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default=\"male\")\n    date_of_birth = models.DateField(default=timezone.now)\n    current_class = models.ForeignKey(\n        StudentClass, on_delete=models.SET_NULL, blank=True, null=True\n    )\n    date_of_admission = models.DateField(default=timezone.now)\n\n    mobile_num_regex = RegexValidator(\n        regex=\"^[0-9]{10,15}$\", message=\"Entered mobile number isn't in a right format!\"\n    )\n    parent_mobile_number = models.CharField(\n        validators=[mobile_num_regex], max_length=13, blank=True\n    )\n\n    address = models.TextField(blank=True)\n    others = models.TextField(blank=True)\n    passport = models.ImageField(blank=True, upload_to=\"students/passports/\")\n\n    class Meta:\n        ordering = [\"surname\", \"firstname\", \"other_name\"]\n\n    def __str__(self):\n        return f\"{self.surname} {self.firstname} {self.other_name} ({self.registration_number})\"\n\n    def get_absolute_url(self):\n        return reverse(\"student-detail\", kwargs={\"pk\": self.pk})\n\n\nclass StudentBulkUpload(models.Model):\n    date_uploaded = models.DateTimeField(auto_now=True)\n    csv_file = models.FileField(upload_to=\"students/bulkupload/\")\n"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass Student(models.Model):\n    STATUS_CHOICES = [(\"active\", \"Active\"), (\"inactive\", \"Inactive\")]\n\n    GENDER_CHOICES = [(\"male\", \"Male\"), (\"female\", \"Female\")]\n\n    current_status = models.CharField(\n        max_length=10, choices=STATUS_CHOICES, default=\"active\"\n    )\n    registration_number = models.CharField(max_length=200, unique=True)\n    surname = models.CharField(max_length=200)\n    firstname = models.CharField(max_length=200)\n    other_name = models.CharField(max_length=200, blank=True)\n    gender = models.CharField(max_length=10, choices=GENDER_CHOICES, default=\"male\")\n    date_of_birth = models.DateField(default=timezone.now)\n    current_class = models.ForeignKey(\n        StudentClass, on_delete=models.SET_NULL, blank=True, null=True\n    )\n    date_of_admission = models.DateField(default=timezone.now)\n\n    mobile_num_regex = RegexValidator(\n        regex=\"^[0-9]{10,15}$\", message=\"Entered mobile number isn't in a right format!\"\n    )\n    parent_mobile_number = models.CharField(\n        validators=[mobile_num_regex], max_length=13, blank=True\n    )\n\n    address = models.TextField(blank=True)\n    others = models.TextField(blank=True)\n    passport = models.ImageField(blank=True, upload_to=\"students/passports/\")\n\n    class Meta:\n        ordering = [\"surname\", \"firstname\", \"other_name\"]\n\n    def __str__(self):\n        return f\"{self.surname} {self.firstname} {self.other_name} ({self.registration_number})\"\n\n    def get_absolute_url(self):\n        return reverse(\"student-detail\", kwargs={\"pk\": self.pk})\n\nDEPENDENCIES:\nmodels.Model, models.CharField, models.DateField, timezone.now, models.ForeignKey, StudentClass, models.SET_NULL, RegexValidator, models.TextField, models.ImageField, reverse\n\n##FRAGMENT_1\n\nclass StudentBulkUpload(models.Model):\n    date_uploaded = models.DateTimeField(auto_now=True)\n    csv_file = models.FileField(upload_to=\"students/bulkupload/\")\n\nDEPENDENCIES:\nmodels.Model, models.DateTim"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "import csv\n\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.contrib.messages.views import SuccessMessageMixin\nfrom django.forms import widgets\nfrom django.http import HttpResponse\nfrom django.urls import reverse_lazy\nfrom django.views.generic import DetailView, ListView, View\nfrom django.views.generic.edit import CreateView, DeleteView, UpdateView\n\nfrom apps.finance.models import Invoice\n\nfrom .models import Student, StudentBulkUpload\n\n\nclass StudentListView(LoginRequiredMixin, ListView):\n    model = Student\n    template_name = \"students/student_list.html\"\n\n\nclass StudentDetailView(LoginRequiredMixin, DetailView):\n    model = Student\n    template_name = \"students/student_detail.html\"\n\n    def get_context_data(self, **kwargs):\n        context = super(StudentDetailView, self).get_context_data(**kwargs)\n        context[\"payments\"] = Invoice.objects.filter(student=self.object)\n        return context\n\n\nclass StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = Student\n    fields = \"__all__\"\n    success_message = \"New student successfully added.\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StudentCreateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        return form\n\n\nclass StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = Student\n    fields = \"__all__\"\n    success_message = \"Record successfully updated.\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StudentUpdateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"date_of_admission\"].widget = widgets.DateInput(\n            attrs={\"type\": \"date\"}\n        )\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        # form.fields['passport'].widget = widgets.FileInput()\n        return form\n\n\nclass StudentDeleteView(LoginRequiredMixin, DeleteView):\n    model = Student\n    success_url = reverse_lazy(\"student-list\")\n\n\nclass StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = StudentBulkUpload\n    template_name = \"students/students_upload.html\"\n    fields = [\"csv_file\"]\n    success_url = \"/student/list\"\n    success_message = \"Successfully uploaded students\"\n\n\nclass DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):\n    def get(self, request, *args, **kwargs):\n        response = HttpResponse(content_type=\"text/csv\")\n        response[\"Content-Disposition\"] = 'attachment; filename=\"student_template.csv\"'\n\n        writer = csv.writer(response)\n        writer.writerow(\n            [\n                \"registration_number\",\n                \"surname\",\n                \"firstname\",\n                \"other_names\",\n                \"gender\",\n                \"parent_number\",\n                \"address\",\n                \"current_class\",\n            ]\n        )\n\n        return response\n"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass StudentListView(LoginRequiredMixin, ListView):\n    model = Student\n    template_name = \"students/student_list.html\"\n\nDEPENDENCIES:\nLoginRequiredMixin, ListView, Student\n\n##FRAGMENT_1\n\nclass StudentDetailView(LoginRequiredMixin, DetailView):\n    model = Student\n    template_name = \"students/student_detail.html\"\n\n    def get_context_data(self, **kwargs):\n        context = super(StudentDetailView, self).get_context_data(**kwargs)\n        context[\"payments\"] = Invoice.objects.filter(student=self.object)\n        return context\n\nDEPENDENCIES:\nLoginRequiredMixin, DetailView, Student, Invoice.objects\n\n##FRAGMENT_2\n\nclass StudentCreateView(LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = Student\n    fields = \"__all__\"\n    success_message = \"New student successfully added.\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StudentCreateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        return form\n\nDEPENDENCIES:\nLoginRequiredMixin, SuccessMessageMixin, CreateView, Student, widgets.DateInput, widgets.Textarea\n\n##FRAGMENT_3\n\nclass StudentUpdateView(LoginRequiredMixin, SuccessMessageMixin, UpdateView):\n    model = Student\n    fields = \"__all__\"\n    success_message = \"Record successfully updated.\"\n\n    def get_form(self):\n        \"\"\"add date picker in forms\"\"\"\n        form = super(StudentUpdateView, self).get_form()\n        form.fields[\"date_of_birth\"].widget = widgets.DateInput(attrs={\"type\": \"date\"})\n        form.fields[\"date_of_admission\"].widget = widgets.DateInput(\n            attrs={\"type\": \"date\"}\n        )\n        form.fields[\"address\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        form.fields[\"others\"].widget = widgets.Textarea(attrs={\"rows\": 2})\n        # form.fields['passport'].widget = widgets.FileInput()\n        return form\n\nDEPENDENCIES:\nLoginRequiredMixin, SuccessMessageMixin, UpdateView, Student, widgets.DateInput, widgets.Textarea\n\n##FRAGMENT_4\n\nclass StudentDeleteView(LoginRequiredMixin, DeleteView):\n    model = Student\n    success_url = reverse_lazy(\"student-list\")\n\nDEPENDENCIES:\nLoginRequiredMixin, DeleteView, Student, reverse_lazy\n\n##FRAGMENT_5\n\nclass StudentBulkUploadView(LoginRequiredMixin, SuccessMessageMixin, CreateView):\n    model = StudentBulkUpload\n    template_name = \"students/students_upload.html\"\n    fields = [\"csv_file\"]\n    success_url = \"/student/list\"\n    success_message = \"Successfully uploaded students\"\n\nDEPENDENCIES:\nLoginRequiredMixin, SuccessMessageMixin, CreateView, StudentBulkUpload\n\n##FRAGMENT_6\n\nclass DownloadCSVViewdownloadcsv(LoginRequiredMixin, View):\n    def get(self, request, *args, **kwargs):\n        response = HttpResponse(content_type=\"text/csv\")\n        response[\"Content-Disposition\"] = 'attachment; filename=\"student_template.csv\"'\n\n        writer = csv.writer(response)\n        writer.writerow(\n            [\n                \"registration_number\",\n                \"surname\",\n                \"firstname\",\n                \"other_names\",\n                \"gender\",\n                \"parent_number\",\n                \"address\",\n                \"current_class\",\n            ]\n        )\n\n        return response\n\nDEPENDENCIES:\nLoginRequiredMixin, View, HttpResponse, csv.writer"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django import forms\nfrom django.forms import modelformset_factory\n\nfrom apps.corecode.models import AcademicSession, AcademicTerm, Subject\n\nfrom .models import Result\n\n\nclass CreateResults(forms.Form):\n    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())\n    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())\n    subjects = forms.ModelMultipleChoiceField(\n        queryset=Subject.objects.all(), widget=forms.CheckboxSelectMultiple\n    )\n\n\nEditResults = modelformset_factory(\n    Result, fields=(\"test_score\", \"exam_score\"), extra=0, can_delete=True\n)"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass CreateResults(forms.Form):\n    session = forms.ModelChoiceField(queryset=AcademicSession.objects.all())\n    term = forms.ModelChoiceField(queryset=AcademicTerm.objects.all())\n    subjects = forms.ModelMultipleChoiceField(\n        queryset=Subject.objects.all(), widget=forms.CheckboxSelectMultiple\n    )\n\nDEPENDENCIES:\nforms.Form, forms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects, forms.ModelMultipleChoiceField, Subject.objects, forms.CheckboxSelectMultiple\n\n##FRAGMENT_1\n\nEditResults = modelformset_factory(\n    Result, fields=(\"test_score\", \"exam_score\"), extra=0, can_delete=True\n)\n\nDEPENDENCIES:\nmodelformset_factory, Result"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django.contrib import messages\nfrom django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.shortcuts import redirect, render\nfrom django.views.generic import DetailView, ListView, View\n\nfrom apps.students.models import Student\n\nfrom .forms import CreateResults, EditResults\nfrom .models import Result\n\n\n@login_required\ndef create_result(request):\n    students = Student.objects.all()\n    if request.method == \"POST\":\n\n        # after visiting the second page\n        if \"finish\" in request.POST:\n            form = CreateResults(request.POST)\n            if form.is_valid():\n                subjects = form.cleaned_data[\"subjects\"]\n                session = form.cleaned_data[\"session\"]\n                term = form.cleaned_data[\"term\"]\n                students = request.POST[\"students\"]\n                results = []\n                for student in students.split(\",\"):\n                    stu = Student.objects.get(pk=student)\n                    if stu.current_class:\n                        for subject in subjects:\n                            check = Result.objects.filter(\n                                session=session,\n                                term=term,\n                                current_class=stu.current_class,\n                                subject=subject,\n                                student=stu,\n                            ).first()\n                            if not check:\n                                results.append(\n                                    Result(\n                                        session=session,\n                                        term=term,\n                                        current_class=stu.current_class,\n                                        subject=subject,\n                                        student=stu,\n                                    )\n                                )\n\n                Result.objects.bulk_create(results)\n                return redirect(\"edit-results\")\n\n        # after choosing students\n        id_list = request.POST.getlist(\"students\")\n        if id_list:\n            form = CreateResults(\n                initial={\n                    \"session\": request.current_session,\n                    \"term\": request.current_term,\n                }\n            )\n            studentlist = \",\".join(id_list)\n            return render(\n                request,\n                \"result/create_result_page2.html\",\n                {\"students\": studentlist, \"form\": form, \"count\": len(id_list)},\n            )\n        else:\n            messages.warning(request, \"You didnt select any student.\")\n    return render(request, \"result/create_result.html\", {\"students\": students})\n\n\n@login_required\ndef edit_results(request):\n    if request.method == \"POST\":\n        form = EditResults(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Results successfully updated\")\n            return redirect(\"edit-results\")\n    else:\n        results = Result.objects.filter(\n            session=request.current_session, term=request.current_term\n        )\n        form = EditResults(queryset=results)\n    return render(request, \"result/edit_results.html\", {\"formset\": form})\n\n\nclass ResultListView(LoginRequiredMixin, View):\n    def get(self, request, *args, **kwargs):\n        results = Result.objects.filter(\n            session=request.current_session, term=request.current_term\n        )\n        bulk = {}\n\n        for result in results:\n            test_total = 0\n            exam_total = 0\n            subjects = []\n            for subject in results:\n                if subject.student == result.student:\n                    subjects.append(subject)\n                    test_total += subject.test_score\n                    exam_total += subject.exam_score\n\n            bulk[result.student.id] = {\n                \"student\": result.student,\n                \"subjects\": subjects,\n                \"test_total\": test_total,\n                \"exam_total\": exam_total,\n                \"total_total\": test_total + exam_total,\n            }\n\n        context = {\"results\": bulk}\n        return render(request, \"result/all_results.html\", context)"},{"role": "assistant", "content": "##FRAGMENT_0\n\n@login_required\ndef create_result(request):\n    students = Student.objects.all()\n    if request.method == \"POST\":\n\n        # after visiting the second page\n        if \"finish\" in request.POST:\n            form = CreateResults(request.POST)\n            if form.is_valid():\n                subjects = form.cleaned_data[\"subjects\"]\n                session = form.cleaned_data[\"session\"]\n                term = form.cleaned_data[\"term\"]\n                students = request.POST[\"students\"]\n                results = []\n                for student in students.split(\",\"):\n                    stu = Student.objects.get(pk=student)\n                    if stu.current_class:\n                        for subject in subjects:\n                            check = Result.objects.filter(\n                                session=session,\n                                term=term,\n                                current_class=stu.current_class,\n                                subject=subject,\n                                student=stu,\n                            ).first()\n                            if not check:\n                                results.append(\n                                    Result(\n                                        session=session,\n                                        term=term,\n                                        current_class=stu.current_class,\n                                        subject=subject,\n                                        student=stu,\n                                    )\n                                )\n\n                Result.objects.bulk_create(results)\n                return redirect(\"edit-results\")\n\n        # after choosing students\n        id_list = request.POST.getlist(\"students\")\n        if id_list:\n            form = CreateResults(\n                initial={\n                    \"session\": request.current_session,\n                    \"term\": request.current_term,\n                }\n            )\n            studentlist = \",\".join(id_list)\n            return render(\n                request,\n                \"result/create_result_page2.html\",\n                {\"students\": studentlist, \"form\": form, \"count\": len(id_list)},\n            )\n        else:\n            messages.warning(request, \"You didnt select any student.\")\n    return render(request, \"result/create_result.html\", {\"students\": students})\n\nDEPENDENCIES:\n@login_required, Student.objects, CreateResults, Result.objects, redirect, render, messages.warning\n\n##FRAGMENT_1\n\n@login_required\ndef edit_results(request):\n    if request.method == \"POST\":\n        form = EditResults(request.POST)\n        if form.is_valid():\n            form.save()\n            messages.success(request, \"Results successfully updated\")\n            return redirect(\"edit-results\")\n    else:\n        results = Result.objects.filter(\n            session=request.current_session, term=request.current_term\n        )\n        form = EditResults(queryset=results)\n    return render(request, \"result/edit_results.html\", {\"formset\": form})\n\nDEPENDENCIES:\n@login_required, EditResults, Result.objects, redirect, render, messages.success\n\n##FRAGMENT_2\n\nclass ResultListView(LoginRequiredMixin, View):\n    def get(self, request, *args, **kwargs):\n        results = Result.objects.filter(\n            session=request.current_session, term=request.current_term\n        )\n        bulk = {}\n\n        for result in results:\n            test_total = 0\n            exam_total = 0\n            subjects = []\n            for subject in results:\n                if subject.student == result.student:\n                    subjects.append(subject)\n                    test_total += subject.test_score\n                    exam_total += subject.exam_score\n\n            bulk[result.student.id] = {\n                \"student\": result.student,\n                \"subjects\": subjects,\n                \"test_total\": test_total,\n                \"exam_total\": exam_total,\n                \"total_total\": test_total + exam_total,\n            }\n\n        context = {\"results\": bulk}\n        return render(request, \"result/all_results.html\", context)\n\nDEPENDENCIES:\nLoginRequiredMixin, View, Result.objects, render"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django.db import models\nfrom django.urls import reverse\nfrom django.utils import timezone\n\nfrom apps.corecode.models import AcademicSession, AcademicTerm, StudentClass\nfrom apps.students.models import Student\n\n\nclass Invoice(models.Model):\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)\n    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)\n    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)\n    balance_from_previous_term = models.IntegerField(default=0)\n    status = models.CharField(\n        max_length=20,\n        choices=[(\"active\", \"Active\"), (\"closed\", \"Closed\")],\n        default=\"active\",\n    )\n\n    class Meta:\n        ordering = [\"student\", \"term\"]\n\n    def __str__(self):\n        return f\"{self.student}\"\n\n    def balance(self):\n        payable = self.total_amount_payable()\n        paid = self.total_amount_paid()\n        return payable - paid\n\n    def amount_payable(self):\n        items = InvoiceItem.objects.filter(invoice=self)\n        total = 0\n        for item in items:\n            total += item.amount\n        return total\n\n    def total_amount_payable(self):\n        return self.balance_from_previous_term + self.amount_payable()\n\n    def total_amount_paid(self):\n        receipts = Receipt.objects.filter(invoice=self)\n        amount = 0\n        for receipt in receipts:\n            amount += receipt.amount_paid\n        return amount\n\n    def get_absolute_url(self):\n        return reverse(\"invoice-detail\", kwargs={\"pk\": self.pk})\n\n\nclass InvoiceItem(models.Model):\n    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)\n    description = models.CharField(max_length=200)\n    amount = models.IntegerField()\n\n\nclass Receipt(models.Model):\n    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)\n    amount_paid = models.IntegerField()\n    date_paid = models.DateField(default=timezone.now)\n    comment = models.CharField(max_length=200, blank=True)\n\n    def __str__(self):\n        return f\"Receipt on {self.date_paid}\"\n"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass Invoice(models.Model):\n    student = models.ForeignKey(Student, on_delete=models.CASCADE)\n    session = models.ForeignKey(AcademicSession, on_delete=models.CASCADE)\n    term = models.ForeignKey(AcademicTerm, on_delete=models.CASCADE)\n    class_for = models.ForeignKey(StudentClass, on_delete=models.CASCADE)\n    balance_from_previous_term = models.IntegerField(default=0)\n    status = models.CharField(\n        max_length=20,\n        choices=[(\"active\", \"Active\"), (\"closed\", \"Closed\")],\n        default=\"active\",\n    )\n\n    class Meta:\n        ordering = [\"student\", \"term\"]\n\n    def __str__(self):\n        return f\"{self.student}\"\n\n    def balance(self):\n        payable = self.total_amount_payable()\n        paid = self.total_amount_paid()\n        return payable - paid\n\n    def amount_payable(self):\n        items = InvoiceItem.objects.filter(invoice=self)\n        total = 0\n        for item in items:\n            total += item.amount\n        return total\n\n    def total_amount_payable(self):\n        return self.balance_from_previous_term + self.amount_payable()\n\n    def total_amount_paid(self):\n        receipts = Receipt.objects.filter(invoice=self)\n        amount = 0\n        for receipt in receipts:\n            amount += receipt.amount_paid\n        return amount\n\n    def get_absolute_url(self):\n        return reverse(\"invoice-detail\", kwargs={\"pk\": self.pk})\n\nDEPENDENCIES:\nmodels.Model, Student, AcademicSession, AcademicTerm, StudentClass, InvoiceItem.objects, Receipt.objects, reverse\n\n##FRAGMENT_1\n\nclass InvoiceItem(models.Model):\n    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)\n    description = models.CharField(max_length=200)\n    amount = models.IntegerField()\n\nDEPENDENCIES:\nmodels.Model, Invoice\n\n##FRAGMENT_2\n\nclass Receipt(models.Model):\n    invoice = models.ForeignKey(Invoice, on_delete=models.CASCADE)\n    amount_paid = models.IntegerField()\n    date_paid = models.DateField(default=timezone.now)\n    comment = models.CharField(max_length=200, blank=True)\n\n    def __str__(self):\n        return f\"Receipt on {self.date_paid}\"\n\nDEPENDENCIES:\nmodels.Model, Invoice, timezone.now"}]}
{"messages": [{"role": "system", "content":  "Code fragmentation process example:\n\nFOR THE GIVEN CODE:\n\nfrom django import forms\nfrom django.forms import ModelForm, modelformset_factory\n\nfrom .models import (\n    AcademicSession,\n    AcademicTerm,\n    SiteConfig,\n    StudentClass,\n    Subject,\n)\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\n\n###\nFOLLOWING FRAGMENTATION IS EXPECTED:\n\n##FRAGMENT_0\n\nSiteConfigForm = modelformset_factory(\n    SiteConfig,\n    fields=(\n        \"key\",\n        \"value\",\n    ),\n    extra=0,\n)\n\n\n##FRAGMENT_1\n\nclass AcademicSessionForm(ModelForm):\n    prefix = \"Academic Session\"\n\n    class Meta:\n        model = AcademicSession\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicSessionForm.Meta\n\n##FRAGMENT_2\n\n\nclass AcademicTermForm(ModelForm):\n    prefix = \"Academic Term\"\n\n    class Meta:\n        model = AcademicTerm\n        fields = [\"name\", \"current\"]\n\nDEPENDECIES:\nAcademicTermForm.Meta\n\n##FRAGMENT_3\n\nclass SubjectForm(ModelForm):\n    prefix = \"Subject\"\n\n    class Meta:\n        model = Subject\n        fields = [\"name\"]\n\nDEPENDECIES:\nSubjectForm.Meta\n\n##FRAGMENT_6\nclass SubjectForm.Meta:\n        model = Subject\n        fields = [\"name\"]\n\n\n##FRAGMENT_4\n\nclass StudentClassForm(ModelForm):\n    prefix = \"Class\"\n\n    class Meta:\n        model = StudentClass\n        fields = [\"name\"]\n\nDEPENDENCIES\n\n##FRAGMENT_5\n\nclass CurrentSessionForm(forms.Form):\n    current_session = forms.ModelChoiceField(\n        queryset=AcademicSession.objects.all(),\n        help_text='Click <a href=\"/session/create/?next=current-session/\">here</a> to add new session',\n    )\n    current_term = forms.ModelChoiceField(\n        queryset=AcademicTerm.objects.all(),\n        help_text='Click <a href=\"/term/create/?next=current-session/\">here</a> to add new term',\n    )\nDEPENDENCIES:\nforms.ModelChoiceField, AcademicSession.objects, AcademicTerm.objects"},{"role": "user", "content" :  "from django.contrib.auth.decorators import login_required\nfrom django.contrib.auth.mixins import LoginRequiredMixin\nfrom django.shortcuts import redirect, render\nfrom django.urls import reverse_lazy\nfrom django.views.generic import DetailView, ListView\nfrom django.views.generic.edit import CreateView, DeleteView, UpdateView\n\nfrom apps.students.models import Student\n\nfrom .forms import InvoiceItemFormset, InvoiceReceiptFormSet, Invoices\nfrom .models import Invoice, InvoiceItem, Receipt\n\n\nclass InvoiceListView(LoginRequiredMixin, ListView):\n    model = Invoice\n\n\nclass InvoiceCreateView(LoginRequiredMixin, CreateView):\n    model = Invoice\n    fields = \"__all__\"\n    success_url = \"/finance/list\"\n\n    def get_context_data(self, **kwargs):\n        context = super(InvoiceCreateView, self).get_context_data(**kwargs)\n        if self.request.POST:\n            context[\"items\"] = InvoiceItemFormset(\n                self.request.POST, prefix=\"invoiceitem_set\"\n            )\n        else:\n            context[\"items\"] = InvoiceItemFormset(prefix=\"invoiceitem_set\")\n        return context\n\n    def form_valid(self, form):\n        context = self.get_context_data()\n        formset = context[\"items\"]\n        self.object = form.save()\n        if self.object.id != None:\n            if form.is_valid() and formset.is_valid():\n                formset.instance = self.object\n                formset.save()\n        return super().form_valid(form)\n\n\nclass InvoiceDetailView(LoginRequiredMixin, DetailView):\n    model = Invoice\n    fields = \"__all__\"\n\n    def get_context_data(self, **kwargs):\n        context = super(InvoiceDetailView, self).get_context_data(**kwargs)\n        context[\"receipts\"] = Receipt.objects.filter(invoice=self.object)\n        context[\"items\"] = InvoiceItem.objects.filter(invoice=self.object)\n        return context\n\n\nclass InvoiceUpdateView(LoginRequiredMixin, UpdateView):\n    model = Invoice\n    fields = [\"student\", \"session\", \"term\", \"class_for\", \"balance_from_previous_term\"]\n\n    def get_context_data(self, **kwargs):\n        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)\n        if self.request.POST:\n            context[\"receipts\"] = InvoiceReceiptFormSet(\n                self.request.POST, instance=self.object\n            )\n            context[\"items\"] = InvoiceItemFormset(\n                self.request.POST, instance=self.object\n            )\n        else:\n            context[\"receipts\"] = InvoiceReceiptFormSet(instance=self.object)\n            context[\"items\"] = InvoiceItemFormset(instance=self.object)\n        return context\n\n    def form_valid(self, form):\n        context = self.get_context_data()\n        formset = context[\"receipts\"]\n        itemsformset = context[\"items\"]\n        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():\n            form.save()\n            formset.save()\n            itemsformset.save()\n        return super().form_valid(form)\n\n\nclass InvoiceDeleteView(LoginRequiredMixin, DeleteView):\n    model = Invoice\n    success_url = reverse_lazy(\"invoice-list\")\n\n\nclass ReceiptCreateView(LoginRequiredMixin, CreateView):\n    model = Receipt\n    fields = [\"amount_paid\", \"date_paid\", \"comment\"]\n    success_url = reverse_lazy(\"invoice-list\")\n\n    def form_valid(self, form):\n        obj = form.save(commit=False)\n        invoice = Invoice.objects.get(pk=self.request.GET[\"invoice\"])\n        obj.invoice = invoice\n        obj.save()\n        return redirect(\"invoice-list\")\n\n    def get_context_data(self, **kwargs):\n        context = super(ReceiptCreateView, self).get_context_data(**kwargs)\n        invoice = Invoice.objects.get(pk=self.request.GET[\"invoice\"])\n        context[\"invoice\"] = invoice\n        return context\n\n\nclass ReceiptUpdateView(LoginRequiredMixin, UpdateView):\n    model = Receipt\n    fields = [\"amount_paid\", \"date_paid\", \"comment\"]\n    success_url = reverse_lazy(\"invoice-list\")\n\n\nclass ReceiptDeleteView(LoginRequiredMixin, DeleteView):\n    model = Receipt\n    success_url = reverse_lazy(\"invoice-list\")\n\n\n@login_required\ndef bulk_invoice(request):\n    return render(request, \"finance/bulk_invoice.html\")\n"},{"role": "assistant", "content": "##FRAGMENT_0\n\nclass InvoiceListView(LoginRequiredMixin, ListView):\n    model = Invoice\n\nDEPENDENCIES:\nLoginRequiredMixin, ListView, Invoice\n\n##FRAGMENT_1\n\nclass InvoiceCreateView(LoginRequiredMixin, CreateView):\n    model = Invoice\n    fields = \"__all__\"\n    success_url = \"/finance/list\"\n\n    def get_context_data(self, **kwargs):\n        context = super(InvoiceCreateView, self).get_context_data(**kwargs)\n        if self.request.POST:\n            context[\"items\"] = InvoiceItemFormset(\n                self.request.POST, prefix=\"invoiceitem_set\"\n            )\n        else:\n            context[\"items\"] = InvoiceItemFormset(prefix=\"invoiceitem_set\")\n        return context\n\n    def form_valid(self, form):\n        context = self.get_context_data()\n        formset = context[\"items\"]\n        self.object = form.save()\n        if self.object.id != None:\n            if form.is_valid() and formset.is_valid():\n                formset.instance = self.object\n                formset.save()\n        return super().form_valid(form)\n\nDEPENDENCIES:\nLoginRequiredMixin, CreateView, Invoice, InvoiceItemFormset\n\n##FRAGMENT_2\n\nclass InvoiceDetailView(LoginRequiredMixin, DetailView):\n    model = Invoice\n    fields = \"__all__\"\n\n    def get_context_data(self, **kwargs):\n        context = super(InvoiceDetailView, self).get_context_data(**kwargs)\n        context[\"receipts\"] = Receipt.objects.filter(invoice=self.object)\n        context[\"items\"] = InvoiceItem.objects.filter(invoice=self.object)\n        return context\n\nDEPENDENCIES:\nLoginRequiredMixin, DetailView, Invoice, Receipt.objects, InvoiceItem.objects\n\n##FRAGMENT_3\n\nclass InvoiceUpdateView(LoginRequiredMixin, UpdateView):\n    model = Invoice\n    fields = [\"student\", \"session\", \"term\", \"class_for\", \"balance_from_previous_term\"]\n\n    def get_context_data(self, **kwargs):\n        context = super(InvoiceUpdateView, self).get_context_data(**kwargs)\n        if self.request.POST:\n            context[\"receipts\"] = InvoiceReceiptFormSet(\n                self.request.POST, instance=self.object\n            )\n            context[\"items\"] = InvoiceItemFormset(\n                self.request.POST, instance=self.object\n            )\n        else:\n            context[\"receipts\"] = InvoiceReceiptFormSet(instance=self.object)\n            context[\"items\"] = InvoiceItemFormset(instance=self.object)\n        return context\n\n    def form_valid(self, form):\n        context = self.get_context_data()\n        formset = context[\"receipts\"]\n        itemsformset = context[\"items\"]\n        if form.is_valid() and formset.is_valid() and itemsformset.is_valid():\n            form.save()\n            formset.save()\n            itemsformset.save()\n        return super().form_valid(form)\n\nDEPENDENCIES:\nLoginRequiredMixin, UpdateView, Invoice, InvoiceReceiptFormSet, InvoiceItemFormset\n\n##FRAGMENT_4\n\nclass InvoiceDeleteView(LoginRequiredMixin, DeleteView):\n    model = Invoice\n    success_url = reverse_lazy(\"invoice-list\")\n\nDEPENDENCIES:\nLoginRequiredMixin, DeleteView, Invoice, reverse_lazy\n\n##FRAGMENT_5\n\nclass ReceiptCreateView(LoginRequiredMixin, CreateView):\n    model = Receipt\n    fields = [\"amount_paid\", \"date_paid\", \"comment\"]\n    success_url = reverse_lazy(\"invoice-list\")\n\n    def form_valid(self, form):\n        obj = form.save(commit=False)\n        invoice = Invoice.objects.get(pk=self.request.GET[\"invoice\"])\n        obj.invoice = invoice\n        obj.save()\n        return redirect(\"invoice-list\")\n\n    def get_context_data(self, **kwargs):\n        context = super(ReceiptCreateView, self).get_context_data(**kwargs)\n        invoice = Invoice.objects.get(pk=self.request.GET[\"invoice\"])\n        context[\"invoice\"] = invoice\n        return context\n\nDEPENDENCIES:\nLoginRequiredMixin, CreateView, Receipt, Invoice.objects, redirect, reverse_lazy\n\n##FRAGMENT_6\n\nclass ReceiptUpdateView(LoginRequiredMixin, UpdateView):\n    model = Receipt\n    fields = [\"amount_paid\", \"date_paid\", \"comment\"]\n    success_url = reverse_lazy(\"invoice-list\")\n\nDEPENDENCIES:\nLoginRequiredMixin, UpdateView, Receipt, reverse_lazy\n\n##FRAGMENT_7\n\nclass ReceiptDeleteView(LoginRequiredMixin, DeleteView):\n    model = Receipt\n    success_url = reverse_lazy(\"invoice-list\")\n\nDEPENDENCIES:\nLoginRequiredMixin, DeleteView, Receipt, reverse_lazy\n\n##FRAGMENT_8\n\n@login_required\ndef bulk_invoice(request):\n    return render(request, \"finance/bulk_invoice.html\")\n\nDEPENDENCIES:\n@login_required, render"}]}